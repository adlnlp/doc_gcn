# -*- coding: utf-8 -*-
"""text_density_features.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1btBRE71adoGNmcP0rE3YnT9ZiCs72N-2
"""

class DocGCN_Classifier(torch.nn.Module):
    def __init__(self):
        super(DocGCN_Classifier, self).__init__()

        self.l1 = AutoModel.from_pretrained("bert-base-uncased")# BERT large
        self.pre_classifier = torch.nn.Linear(768, 768)
        self.dropout = torch.nn.Dropout(0.1)
        self.hidden_cls = torch.nn.Linear(768,768)
        self.hidden_parsing = torch.nn.Linear(768,768)
        self.hidden_den = torch.nn.Linear(768,768)
        self.hidden_vis = torch.nn.Linear(768,768)
        self.hidden_vis_pro = torch.nn.Linear(768,768)
        self.hidden_all = torch.nn.Linear(768*2,768*2)
        self.before_classifier = torch.nn.Linear(768*2,128)
\
        self.pooling = torch.nn.MaxPool2d((2,1), stride=None)
        self.classifier = torch.nn.Linear(128, 4)

    def forward(self, input_ids, attention_mask, token_type_ids, char_density,char_number,visual_feature,bert_cls,parsing1,parsing2,visual):
        output_1 = self.l1(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)
        hidden_state = output_1[0]
        pooler = hidden_state[:, 0]

        # BERT 768 BERT / large 1024
        
        # set different hidden layer, number of hidden units, regularization methods including bn and dropout
        
        pooler = self.pre_classifier(pooler)
        pooler = torch.nn.Tanh()(pooler)
        pooler = self.dropout(pooler)

        pooler = torch.cat((pooler.unsqueeze(1),bert_cls.unsqueeze(1)),1)
        pooler = self.pooling(pooler).squeeze(1)
        pooler = self.hidden_cls(pooler)
        pooler = torch.nn.Tanh()(pooler)
        pooler = self.dropout(pooler)

        visual = self.hidden_vis_pro(visual)
        visual = torch.nn.Tanh()(visual)
        visual = self.dropout(visual)

        visual = torch.cat((visual.unsqueeze(1),visual_feature.unsqueeze(1)),1)
        visual = self.pooling(visual).squeeze(1)
        visual = self.hidden_vis(visual)
        visual = torch.nn.Tanh()(visual)
        visual = self.dropout(visual)

        pooler = torch.cat((pooler,visual),1)
        pooler = self.hidden_all(pooler)
        pooler = torch.nn.Tanh()(pooler)
        pooler = self.dropout(pooler)

        pooler = self.before_classifier(pooler)
        pooler = torch.nn.Tanh()(pooler)
        pooler = self.dropout(pooler)

        output = self.classifier(pooler)
        return output